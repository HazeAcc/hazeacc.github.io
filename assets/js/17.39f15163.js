(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{220:function(t,e,r){"use strict";r.r(e);var _=r(1),v=Object(_.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"leetcode-题解速览"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-题解速览","aria-hidden":"true"}},[t._v("#")]),t._v(" LeetCode 题解速览")]),t._v(" "),r("p",[t._v("对于写过的题，将其最精华的思想浓缩为一句 key，组成 key list，以最后复习时过一遍这些思想。")]),t._v(" "),r("blockquote",[r("p",[r("strong",[t._v("⚠ 整理中")])]),t._v(" "),r("p",[t._v("最近日期：05/08")]),t._v(" "),r("p",[t._v("之前做过的题目补充题解的进度：95%")])]),t._v(" "),r("blockquote",[r("p",[t._v("md 表格生成代码：")]),t._v(" "),r("p",[t._v("如果已经写了一些题目了，第一次想要整理成下面这样的表格用，手动整理太慢")]),t._v(" "),r("p",[t._v("简单写了一份代码用于获得所有已通过的题目信息并生成 markdown 表格")]),t._v(" "),r("p",[t._v("有需要可以自取，根据你的需求改一改就好了")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打开 https://leetcode-cn.com/problemset/all/")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 登录后，拉到页面最低端，将“每页数量”设置为全部")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在控制台运行以下代码，即可自动生成完成过的题目markdown表格")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" resultArray "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'| 序号 | 难度 | 题目 | 标签 | 思路 |'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'| ---- | ---- | ---- | ---- | ---- |'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" table "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.reactable-data'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" row "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("of")]),t._v(" table"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("row"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.text-success'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" cols "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" row"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelectorAll")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'td'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" order "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cols"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" title "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" row"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.question-title a'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" titleName "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" title"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" titleLink "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" title"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("getAttribute")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'href'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" level "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cols"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'span'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    resultArray"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),r("span",{pre:!0,attrs:{class:"token template-string"}},[r("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("| ")]),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("order"),r("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v(" | ")]),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("level"),r("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v(" | [")]),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("titleName"),r("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("](https://leetcode-cn.com")]),r("span",{pre:!0,attrs:{class:"token interpolation"}},[r("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("titleLink"),r("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v(") |  |  |")]),r("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" resultString "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" resultArray"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'复制内容：'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resultString"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'请手动复制监控台输出的内容'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"_0-255-题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_0-255-题","aria-hidden":"true"}},[t._v("#")]),t._v(" 0~255 题")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("序号")]),t._v(" "),r("th",[t._v("难度")]),t._v(" "),r("th",[t._v("题目")]),t._v(" "),r("th",[t._v("标签")]),t._v(" "),r("th",[t._v("思路")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("1")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/two-sum/",target:"_blank",rel:"noopener noreferrer"}},[t._v("两数之和"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("利用哈希表的 key，使 key+value=target")])]),t._v(" "),r("tr",[r("td",[t._v("2")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/add-two-numbers/",target:"_blank",rel:"noopener noreferrer"}},[t._v("两数相加"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("链表")]),t._v(" "),r("td",[t._v("进位状态、3while 循环")])]),t._v(" "),r("tr",[r("td",[t._v("3")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"}},[t._v("无重复字符的最长子串"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("串")]),t._v(" "),r("td",[t._v("连续字串需满足某性质问题，可考虑滑动窗口，再用 Set 保持无重复")])]),t._v(" "),r("tr",[r("td",[t._v("8")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/string-to-integer-atoi/",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符串转换整数 (atoi)"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("字符串 正则")]),t._v(" "),r("td",[t._v("正则匹配 "),r("code",[t._v("/^(-|\\+)?\\d+/")])])]),t._v(" "),r("tr",[r("td",[t._v("11")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/container-with-most-water/",target:"_blank",rel:"noopener noreferrer"}},[t._v("盛最多水的容器"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组 贪心")]),t._v(" "),r("td",[t._v("短板决定高度：两板中较短一版向中心找更长的板")])]),t._v(" "),r("tr",[r("td",[t._v("21")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-two-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并两个有序链表"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("链表")]),t._v(" "),r("td",[t._v("-")])]),t._v(" "),r("tr",[r("td",[t._v("22")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/generate-parentheses/",target:"_blank",rel:"noopener noreferrer"}},[t._v("括号生成"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("回溯")]),t._v(" "),r("td",[t._v("还有'('时就插入'('，回溯，剩余')'多于'('就插入')'")])]),t._v(" "),r("tr",[r("td",[t._v("23")]),t._v(" "),r("td",[t._v("困难")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并 K 个排序链表"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("链表 分治")]),t._v(" "),r("td",[t._v("已经具有了多个子问题，可以子问题两两合并成一个较大的子问题")])]),t._v(" "),r("tr",[r("td",[t._v("23")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("优先队列")]),t._v(" "),r("td",[t._v("使用优先队列，用最小堆维护每个链表的首元素，便可每次取得最小")])]),t._v(" "),r("tr",[r("td",[t._v("24")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/swap-nodes-in-pairs",target:"_blank",rel:"noopener noreferrer"}},[t._v("两两交换链表中的节点"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("链表")]),t._v(" "),r("td",[t._v("两两一组，每次记录前一组的最后一个")])]),t._v(" "),r("tr",[r("td",[t._v("28")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/implement-strstr",target:"_blank",rel:"noopener noreferrer"}},[t._v("实现 strStr()"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("字符串")]),t._v(" "),r("td",[t._v("暴力 / Sunday / KMP")])]),t._v(" "),r("tr",[r("td",[t._v("33")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/search-in-rotated-sorted-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("搜索旋转排序数组"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("查找")]),t._v(" "),r("td",[t._v("二分法拓展，判断 mid 与哪边围起来是有序的且目标是否在这个范围")])]),t._v(" "),r("tr",[r("td",[t._v("36")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/valid-sudoku",target:"_blank",rel:"noopener noreferrer"}},[t._v("有效的数独"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("用三个对象数组，空间换时间，可仅一次遍历")])]),t._v(" "),r("tr",[r("td",[t._v("42")]),t._v(" "),r("td",[t._v("困难")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/trapping-rain-water/",target:"_blank",rel:"noopener noreferrer"}},[t._v("接雨水"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组 记忆化")]),t._v(" "),r("td",[t._v("遍历两次，记下每个元素的左最高元素和右最高元素，然后取交集")])]),t._v(" "),r("tr",[r("td",[t._v("42")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("数组 栈")]),t._v(" "),r("td",[t._v("高度向下时压栈，向上时元素出栈并与当前元素计算水槽宽高")])]),t._v(" "),r("tr",[r("td",[t._v("42")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("数组 双指针")]),t._v(" "),r("td",[t._v("从两边各自记录找到的最大值，矮的一边向中遍历，小于最大可倒水")])]),t._v(" "),r("tr",[r("td",[t._v("45")]),t._v(" "),r("td",[t._v("困难")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/jump-game-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("跳跃游戏 II"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("贪心")]),t._v(" "),r("td",[t._v("维护当前步数可达最远距离，在该范围内探索加一步可达的最远距离")])]),t._v(" "),r("tr",[r("td",[t._v("46")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/permutations/",target:"_blank",rel:"noopener noreferrer"}},[t._v("全排列"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("回溯")]),t._v(" "),r("td",[t._v("典型利用递归的特性实现回溯")])]),t._v(" "),r("tr",[r("td",[t._v("50")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/powx-n/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pow(x, n)"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("分治")]),t._v(" "),r("td",[t._v("每次将偶数幂次对半分而非一个一个累乘，奇数幂次提一个变成偶数")])]),t._v(" "),r("tr",[r("td",[t._v("53")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-subarray/",target:"_blank",rel:"noopener noreferrer"}},[t._v("最大子序和"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("动态规划")]),t._v(" "),r("td",[t._v("记录某位置前面的最大子序和，判断该位置是否要加上前子序和变大")])]),t._v(" "),r("tr",[r("td",[t._v("55")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/jump-game/",target:"_blank",rel:"noopener noreferrer"}},[t._v("跳跃游戏"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组 贪心")]),t._v(" "),r("td",[t._v("一步一步走，不断延拓我们能够达到的最大边界")])]),t._v(" "),r("tr",[r("td",[t._v("56")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-intervals/",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并区间"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("先以起始位置排序，再按顺序比较，接壤则合并")])]),t._v(" "),r("tr",[r("td",[t._v("69")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/sqrtx/",target:"_blank",rel:"noopener noreferrer"}},[t._v("x 的平方根"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("查找")]),t._v(" "),r("td",[t._v("二分法求平方根，注意琐碎细节")])]),t._v(" "),r("tr",[r("td",[t._v("69")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("数学")]),t._v(" "),r("td",[t._v("数值分析牛顿法求解 x^2-a=0 的根，转化为 x'=(x+a/x)/2 迭代方程")])]),t._v(" "),r("tr",[r("td",[t._v("72")]),t._v(" "),r("td",[t._v("困难")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/edit-distance/",target:"_blank",rel:"noopener noreferrer"}},[t._v("编辑距离"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("动态规划")]),t._v(" "),r("td",[t._v("二维动归，抽象出三种修改方式的状态转移关系")])]),t._v(" "),r("tr",[r("td",[t._v("74")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/search-a-2d-matrix",target:"_blank",rel:"noopener noreferrer"}},[t._v("搜索二维矩阵"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组 分治")]),t._v(" "),r("td",[t._v("二维的二分法，"),r("code",[t._v("[row, col] = [floor(mid/n), mid%n]")])])]),t._v(" "),r("tr",[r("td",[t._v("88")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/merge-sorted-array",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并两个有序数组"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("逆向思维，从后往前两两比较可以让出位置")])]),t._v(" "),r("tr",[r("td",[t._v("94")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-inorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的中序遍历"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树")]),t._v(" "),r("td",[t._v("左遍历压栈到底，弹出节点值，取其右节点继续左遍历")])]),t._v(" "),r("tr",[r("td",[t._v("98")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/validate-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("验证二叉搜索树"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("二叉搜索树")]),t._v(" "),r("td",[t._v("利用定义，设计递归函数"),r("code",[t._v("fn(root,lower,upper)")]),t._v("限制子树保持性质")])]),t._v(" "),r("tr",[r("td",[t._v("98")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("利用性质，判断中序遍历结果是否为升序即可")])]),t._v(" "),r("tr",[r("td",[t._v("100")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/same-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("相同的树"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树")]),t._v(" "),r("td",[t._v("选一种遍历方式同时遍历两棵树即可")])]),t._v(" "),r("tr",[r("td",[t._v("121")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock",target:"_blank",rel:"noopener noreferrer"}},[t._v("买卖股票的最佳时机"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("线性遍历，记录当前已知最小值，相减以计算最大利润")])]),t._v(" "),r("tr",[r("td",[t._v("122")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii",target:"_blank",rel:"noopener noreferrer"}},[t._v("买卖股票的最佳时机 II"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("相邻相减，如果是正的就加起来")])]),t._v(" "),r("tr",[r("td",[t._v("144")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-preorder-traversal/",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的前序遍历"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树")]),t._v(" "),r("td",[t._v("取节点值，右树压栈，往左树探")])]),t._v(" "),r("tr",[r("td",[t._v("151")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"}},[t._v("翻转字符串里的单词"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("字符串")]),t._v(" "),r("td",[t._v("split -> reverse -> join")])]),t._v(" "),r("tr",[r("td",[t._v("155")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/min-stack/",target:"_blank",rel:"noopener noreferrer"}},[t._v("最小栈"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("栈 设计")]),t._v(" "),r("td",[t._v("辅助栈，每次压栈都压 min(x, minStack.top())")])]),t._v(" "),r("tr",[r("td",[t._v("169")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/majority-element",target:"_blank",rel:"noopener noreferrer"}},[t._v("多数元素"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("哈希表统计出现次数，某一值出现次数过半数则结束")])]),t._v(" "),r("tr",[r("td",[t._v("175")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/combine-two-tables",target:"_blank",rel:"noopener noreferrer"}},[t._v("组合两个表"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("SQL JOIN")]),t._v(" "),r("td",[r("code",[t._v("A left join B on A.key = B.key")])])]),t._v(" "),r("tr",[r("td",[t._v("199")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/binary-tree-right-side-view/",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的右视图"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树")]),t._v(" "),r("td",[t._v("BFS（层次遍历）/ DFS（右子树优先+维护当前遍历的节点深度）")])]),t._v(" "),r("tr",[r("td",[t._v("200")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/number-of-islands/",target:"_blank",rel:"noopener noreferrer"}},[t._v("岛屿数量"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("矩阵 遍历")]),t._v(" "),r("td",[t._v("典型 DFS / BFS / 并查集")])]),t._v(" "),r("tr",[r("td",[t._v("202")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/happy-number/comments/",target:"_blank",rel:"noopener noreferrer"}},[t._v("快乐数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("哈希表")]),t._v(" "),r("td",[t._v("Set 存储出现过的结果以避免循环")])]),t._v(" "),r("tr",[r("td",[t._v("202")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/happy-number/comments/",target:"_blank",rel:"noopener noreferrer"}},[t._v("快乐数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("双指针")]),t._v(" "),r("td",[t._v("对于判断是否有无限循环的问题，可以考虑快慢指针")])]),t._v(" "),r("tr",[r("td",[t._v("206")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/reverse-linked-list",target:"_blank",rel:"noopener noreferrer"}},[t._v("反转链表"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("链表")]),t._v(" "),r("td",[t._v("prev、current、current.next 三角恋")])]),t._v(" "),r("tr",[r("td",[t._v("221")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximal-square/",target:"_blank",rel:"noopener noreferrer"}},[t._v("最大正方形"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("矩阵 遍历")]),t._v(" "),r("td",[t._v("对每个为 1 的元素，将其作为正方形左上角，看是否能补两边长变大")])]),t._v(" "),r("tr",[r("td",[t._v("221")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("动态规划")]),t._v(" "),r("td",[t._v("重复计算考虑动归，dp(i,j)等于 i-1、j-1、i-1 且 j-1 三者最小值+1")])]),t._v(" "),r("tr",[r("td",[t._v("225")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/implement-stack-using-queues",target:"_blank",rel:"noopener noreferrer"}},[t._v("用队列实现栈"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("队列 设计")]),t._v(" "),r("td",[t._v("前 n-1 个数从队头出来返入队尾，原本的队尾即可从队头取出")])]),t._v(" "),r("tr",[r("td",[t._v("227")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/basic-calculator-ii",target:"_blank",rel:"noopener noreferrer"}},[t._v("基本计算器 II"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("设计")]),t._v(" "),r("td",[t._v("加减直接运算，乘除则先把之前加减的给吐出来运算完了再加回去")])]),t._v(" "),r("tr",[r("td",[t._v("235")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉搜索树的最近公共祖先"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("二叉搜索树")]),t._v(" "),r("td",[t._v("利用搜索树性质，找到值在两数之间的数即可")])]),t._v(" "),r("tr",[r("td",[t._v("236")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的最近公共祖先"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树 遍历")]),t._v(" "),r("td",[t._v("递归 DFS，左右子树都找到目标（或者当前节点是其中一个）时保存该答案")])])])]),t._v(" "),r("h2",{attrs:{id:"_256-511-题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_256-511-题","aria-hidden":"true"}},[t._v("#")]),t._v(" 256~511 题")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("序号")]),t._v(" "),r("th",[t._v("难度")]),t._v(" "),r("th",[t._v("题目")]),t._v(" "),r("th",[t._v("标签")]),t._v(" "),r("th",[t._v("思路")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("289")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/game-of-life/",target:"_blank",rel:"noopener noreferrer"}},[t._v("生命游戏"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("矩阵 卷积")]),t._v(" "),r("td",[t._v("状态值少，可以使用位运算，在不同的位保存不同阶段的状态")])]),t._v(" "),r("tr",[r("td",[t._v("300")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-increasing-subsequence",target:"_blank",rel:"noopener noreferrer"}},[t._v("最长上升子序列"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("动态规划 子序列")]),t._v(" "),r("td",[t._v("后面的 dp 从前面符合条件的 dp 取最大")])]),t._v(" "),r("tr",[r("td",[t._v("300")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("贪心 分治")]),t._v(" "),r("td",[t._v("维护一个序列：大的接在后面，小的找个位置挤掉一个相对大的")])]),t._v(" "),r("tr",[r("td",[t._v("322")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/coin-change",target:"_blank",rel:"noopener noreferrer"}},[t._v("零钱兑换"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("动态规划")]),t._v(" "),r("td",[t._v("01 背包问题，"),r("code",[t._v("dp[i] = Math.min(dp[i], dp[i - coin] + 1)")])])]),t._v(" "),r("tr",[r("td",[t._v("322")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("贪心 回溯")]),t._v(" "),r("td",[t._v("每次贪心地选择尽量大的硬币（需回溯所有情况以保证最优）")])]),t._v(" "),r("tr",[r("td",[t._v("355")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/design-twitter/",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计推特"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("设计")]),t._v(" "),r("td",[t._v("使用哈希表、链表、优先队列以尽量低的复杂度解决多路归并问题")])]),t._v(" "),r("tr",[r("td",[t._v("357")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/count-numbers-with-unique-digits",target:"_blank",rel:"noopener noreferrer"}},[t._v("计算各个位数不同的数字个数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数学")]),t._v(" "),r("td",[t._v("数的排列组合")])]),t._v(" "),r("tr",[r("td",[t._v("365")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/water-and-jug-problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("水壶问题"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("遍历")]),t._v(" "),r("td",[t._v("遍历所有操作，消除重复情况以避免死循环")])]),t._v(" "),r("tr",[r("td",[t._v("365")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("数学")]),t._v(" "),r("td",[t._v("存在 a、b 使得"),r("code",[t._v("ax + by = z")]),t._v("，即满足"),r("code",[t._v("z % gcd(x, y) = 0")])])]),t._v(" "),r("tr",[r("td",[t._v("404")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/sum-of-left-leaves/",target:"_blank",rel:"noopener noreferrer"}},[t._v("左叶子之和"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树")]),t._v(" "),r("td",[t._v("给函数增加一个“当前节点是否为左节点”的标记")])]),t._v(" "),r("tr",[r("td",[t._v("409")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-palindrome",target:"_blank",rel:"noopener noreferrer"}},[t._v("最长回文串"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("哈希表")]),t._v(" "),r("td",[t._v("偶数个数字符直接对称，奇数个可丢掉一个变成偶数个加以利用")])]),t._v(" "),r("tr",[r("td",[t._v("445")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/add-two-numbers-ii/",target:"_blank",rel:"noopener noreferrer"}},[t._v("两数相加 II"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("链表")]),t._v(" "),r("td",[t._v("遇到逆序，可以考虑栈")])]),t._v(" "),r("tr",[r("td",[t._v("460")]),t._v(" "),r("td",[t._v("困难")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/lfu-cache/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LFU 缓存"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("设计 哈希表")]),t._v(" "),r("td",[t._v("双哈希表以不同的 key 记录同一个结果，以维护 O(1)的增与查")])]),t._v(" "),r("tr",[r("td",[t._v("466")]),t._v(" "),r("td",[t._v("困难")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/count-the-repetitions/",target:"_blank",rel:"noopener noreferrer"}},[t._v("统计重复个数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("字符串 子序列")]),t._v(" "),r("td",[t._v("对于周期性的问题，找出“循环节”，即可省略所有重复周期的遍历")])]),t._v(" "),r("tr",[r("td",[t._v("501")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉搜索树中的众数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("二叉搜索树")]),t._v(" "),r("td",[t._v("利用“中序遍历 BST 可得到递增数组”的性质")])]),t._v(" "),r("tr",[r("td",[t._v("509")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/fibonacci-number",target:"_blank",rel:"noopener noreferrer"}},[t._v("斐波那契数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("动态规划")]),t._v(" "),r("td",[t._v("非常经典的动规消除重复子问题 "),r("code",[t._v("dp[i] = dp[i - 1] + dp[i - 2]")])])])])]),t._v(" "),r("h2",{attrs:{id:"_512-767-题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_512-767-题","aria-hidden":"true"}},[t._v("#")]),t._v(" 512~767 题")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("序号")]),t._v(" "),r("th",[t._v("难度")]),t._v(" "),r("th",[t._v("题目")]),t._v(" "),r("th",[t._v("标签")]),t._v(" "),r("th",[t._v("思路")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("513")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/find-bottom-left-tree-value/",target:"_blank",rel:"noopener noreferrer"}},[t._v("找树左下角的值"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树")]),t._v(" "),r("td",[t._v("记录当前遍历的深度，最深的最左叶子总是会第一个遍历到")])]),t._v(" "),r("tr",[r("td",[t._v("542")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/01-matrix/",target:"_blank",rel:"noopener noreferrer"}},[t._v("01 矩阵"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("矩阵 遍历")]),t._v(" "),r("td",[t._v("逆向思维，将“每个 1 都去找最近的 0”变成“所有 0 组成超级源点去 BFS”")])]),t._v(" "),r("tr",[r("td",[t._v("543")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/diameter-of-binary-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的直径"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树 遍历")]),t._v(" "),r("td",[t._v("记录左树和右树高，记录最大的左右树高之和，返回 1+最高子树高")])]),t._v(" "),r("tr",[r("td",[t._v("572")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/subtree-of-another-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("另一个树的子树"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树 遍历")]),t._v(" "),r("td",[t._v("难度大于表面，细节很多，最好联想串匹配问题去注意细节，DFS 遍历")])]),t._v(" "),r("tr",[r("td",[t._v("572")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("树 串")]),t._v(" "),r("td",[t._v("既然和串匹配很像，KMP 算法也能用在 DFS 上（难度可以算困难了）")])]),t._v(" "),r("tr",[r("td",[t._v("599")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-index-sum-of-two-lists",target:"_blank",rel:"noopener noreferrer"}},[t._v("两个列表的最小索引总和"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("哈希表")]),t._v(" "),r("td",[t._v("将其中一表用<list[i], i>存为哈希表，另一表线性遍历即可")])]),t._v(" "),r("tr",[r("td",[t._v("643")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-average-subarray-i",target:"_blank",rel:"noopener noreferrer"}},[t._v("子数组最大平均数 I"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("定宽滑动窗口")])]),t._v(" "),r("tr",[r("td",[t._v("695")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/max-area-of-island",target:"_blank",rel:"noopener noreferrer"}},[t._v("岛屿的最大面积"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("矩阵 遍历")]),t._v(" "),r("td",[t._v("典型矩阵 DFS，每个位置做好 visited 标记后探索四个方向")])]),t._v(" "),r("tr",[r("td",[t._v("744")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/find-smallest-letter-greater-than-target",target:"_blank",rel:"noopener noreferrer"}},[t._v("寻找比目标字母大的最小字母"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组 查找")]),t._v(" "),r("td",[t._v("尤其注意数组具有一个“有序”的条件，采取线性遍历或二分法")])]),t._v(" "),r("tr",[r("td",[t._v("747")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/largest-number-at-least-twice-of-others",target:"_blank",rel:"noopener noreferrer"}},[t._v("至少是其他数字两倍的最大数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("线性遍历找到第一大和第二大的数进行比较即可")])])])]),t._v(" "),r("h2",{attrs:{id:"_768-1024-题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_768-1024-题","aria-hidden":"true"}},[t._v("#")]),t._v(" 768~1024 题")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("序号")]),t._v(" "),r("th",[t._v("难度")]),t._v(" "),r("th",[t._v("题目")]),t._v(" "),r("th",[t._v("标签")]),t._v(" "),r("th",[t._v("思路")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("836")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/rectangle-overlap",target:"_blank",rel:"noopener noreferrer"}},[t._v("矩形重叠"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("几何")]),t._v(" "),r("td",[t._v("max(x1,x3) < min(x2,x4) && max(y1,y3) < min(y2,y4)")])]),t._v(" "),r("tr",[r("td",[t._v("838")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/push-dominoes",target:"_blank",rel:"noopener noreferrer"}},[t._v("推多米诺"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组 双指针")]),t._v(" "),r("td",[t._v("双指针根据不同的情况进行区域划分，对区域做对应的操作")])]),t._v(" "),r("tr",[r("td",[t._v("841")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/keys-and-rooms",target:"_blank",rel:"noopener noreferrer"}},[t._v("钥匙和房间"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("遍历")]),t._v(" "),r("td",[t._v("DFS/BFS，把当前进入的房间内未去过的房间的钥匙拿到")])]),t._v(" "),r("tr",[r("td",[t._v("876")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/middle-of-the-linked-list",target:"_blank",rel:"noopener noreferrer"}},[t._v("链表的中间结点"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("链表 双指针")]),t._v(" "),r("td",[t._v("经典快慢指针")])]),t._v(" "),r("tr",[r("td",[t._v("887")]),t._v(" "),r("td",[t._v("困难")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/super-egg-drop/",target:"_blank",rel:"noopener noreferrer"}},[t._v("鸡蛋掉落"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("动态规划 分治")]),t._v(" "),r("td",[t._v("dp(K,N)=1+min(max(dp(K-1,X-1),dp(K,N-X))) K 蛋数 N 层数 X 当前层")])]),t._v(" "),r("tr",[r("td",[t._v("892")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/surface-area-of-3d-shapes",target:"_blank",rel:"noopener noreferrer"}},[t._v("三维形体的表面积"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("几何")]),t._v(" "),r("td",[t._v("注意不能用三视图算 可先算所有立方体的表面积再减去被遮挡的面")])]),t._v(" "),r("tr",[r("td",[t._v("905")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/sort-array-by-parity",target:"_blank",rel:"noopener noreferrer"}},[t._v("按奇偶排序数组"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("排序")]),t._v(" "),r("td",[t._v("O(NlogN)：使用排序算法，以模 2 的结果作为排序依据")])]),t._v(" "),r("tr",[r("td",[t._v("905")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("遍历")]),t._v(" "),r("td",[t._v("O(N)：两次遍历，一次输出偶数一次输出奇数")])]),t._v(" "),r("tr",[r("td",[t._v("905")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("双指针")]),t._v(" "),r("td",[t._v("O(N)：快排思想，双指针指向左右边缘，向中心找一对不守序的数")])]),t._v(" "),r("tr",[r("td",[t._v("912")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/sort-an-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("排序数组"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("排序")]),t._v(" "),r("td",[t._v("任意实现一种排序")])]),t._v(" "),r("tr",[r("td",[t._v("914")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/x-of-a-kind-in-a-deck-of-cards",target:"_blank",rel:"noopener noreferrer"}},[t._v("卡牌分组"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("哈希表")]),t._v(" "),r("td",[t._v("哈希表统计各元素个数，求个数的最大公约数是否大于 2")])]),t._v(" "),r("tr",[r("td",[t._v("938")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/range-sum-of-bst",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉搜索树的范围和"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("二叉搜索树")]),t._v(" "),r("td",[t._v("依据性质，根据是否在区间内决定是否深入 DFS 即可")])]),t._v(" "),r("tr",[r("td",[t._v("945")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/minimum-increment-to-make-array-unique",target:"_blank",rel:"noopener noreferrer"}},[t._v("使数组唯一的最小增量"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组 排序")]),t._v(" "),r("td",[t._v("先排序，然后线性遍历查找重复")])]),t._v(" "),r("tr",[r("td",[t._v("958")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/check-completeness-of-a-binary-tree",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的完全性检验"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树")]),t._v(" "),r("td",[t._v("层次遍历，每个入队元素都记录好自己的序号，观察遍历结果是否连续")])]),t._v(" "),r("tr",[r("td",[t._v("994")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/rotting-oranges",target:"_blank",rel:"noopener noreferrer"}},[t._v("腐烂的橘子"),r("OutboundLink")],1)]),t._v(" "),r("td"),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("999")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/available-captures-for-rook",target:"_blank",rel:"noopener noreferrer"}},[t._v("可以被一步捕获的棋子数"),r("OutboundLink")],1)]),t._v(" "),r("td"),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("1013")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/partition-array-into-three-parts-with-equal-sum",target:"_blank",rel:"noopener noreferrer"}},[t._v("将数组分成和相等的三个部分"),r("OutboundLink")],1)]),t._v(" "),r("td"),t._v(" "),r("td")])])]),t._v(" "),r("h2",{attrs:{id:"_1024-题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1024-题","aria-hidden":"true"}},[t._v("#")]),t._v(" 1024+ 题")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("序号")]),t._v(" "),r("th",[t._v("难度")]),t._v(" "),r("th",[t._v("题目")]),t._v(" "),r("th",[t._v("标签")]),t._v(" "),r("th",[t._v("思路")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("1071")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/greatest-common-divisor-of-strings",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符串的最大公因子"),r("OutboundLink")],1)]),t._v(" "),r("td"),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("1095")]),t._v(" "),r("td",[t._v("困难")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/find-in-mountain-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("山脉数组中查找目标值"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("二分查找")]),t._v(" "),r("td",[t._v("二分找山顶时 mid 与 mid+1 比大小识别坡度，左右坡分别找 target")])]),t._v(" "),r("tr",[r("td",[t._v("1103")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/distribute-candies-to-people",target:"_blank",rel:"noopener noreferrer"}},[t._v("分糖果 II"),r("OutboundLink")],1)]),t._v(" "),r("td"),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("1111")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/",target:"_blank",rel:"noopener noreferrer"}},[t._v("有效括号的嵌套深度"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("子序列 分组")]),t._v(" "),r("td",[t._v("利用奇偶性进行分组")])]),t._v(" "),r("tr",[r("td",[t._v("1160")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/find-words-that-can-be-formed-by-characters",target:"_blank",rel:"noopener noreferrer"}},[t._v("拼写单词"),r("OutboundLink")],1)]),t._v(" "),r("td"),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("1162")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/as-far-from-land-as-possible/",target:"_blank",rel:"noopener noreferrer"}},[t._v("地图分析"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("图 遍历")]),t._v(" "),r("td",[t._v("多源 DFS，visited 数组")])]),t._v(" "),r("tr",[r("td",[t._v("1248")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/count-number-of-nice-subarrays/",target:"_blank",rel:"noopener noreferrer"}},[t._v("统计「优美子数组」"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("子序列 前缀和")]),t._v(" "),r("td",[t._v("找到所有奇数，然后(odd[i]−odd[i−1])∗(odd[i+k]−odd[i+k−1])")])]),t._v(" "),r("tr",[r("td",[t._v("1248")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("-")]),t._v(" "),r("td",[t._v("改为差分形式，遍历的数通过左最近奇数 i 找到 odd[i-k]来累加")])])])]),t._v(" "),r("h2",{attrs:{id:"程序员面试金典系列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#程序员面试金典系列","aria-hidden":"true"}},[t._v("#")]),t._v(" 程序员面试金典系列")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("序号")]),t._v(" "),r("th",[t._v("难度")]),t._v(" "),r("th",[t._v("题目")]),t._v(" "),r("th",[t._v("标签")]),t._v(" "),r("th",[t._v("思路")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("面试题 01.06")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/compress-string-lcci",target:"_blank",rel:"noopener noreferrer"}},[t._v("字符串压缩"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("字符串")]),t._v(" "),r("td",[t._v("取一字符，while 自增循环计其连续个数，加入结果字符串")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 01.07")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/rotate-matrix-lcci/",target:"_blank",rel:"noopener noreferrer"}},[t._v("旋转矩阵"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("矩阵 交换")]),t._v(" "),r("td",[t._v("分成 4 区，顺时针交换；或者先转置，再水平翻转")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 04.03")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/list-of-depth-lcci",target:"_blank",rel:"noopener noreferrer"}},[t._v("特定深度节点链表"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树 遍历")]),t._v(" "),r("td",[t._v("层次遍历（BFS）一层一次循环或者 DFS 将深度当参数传入")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 08.11")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/coin-lcci/",target:"_blank",rel:"noopener noreferrer"}},[t._v("硬币"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("动态规划")]),t._v(" "),r("td",[t._v("完全背包问题，关键点在于面额枚举在外层，背包遍历在内层")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 10.01")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/sorted-merge-lcci",target:"_blank",rel:"noopener noreferrer"}},[t._v("合并排序的数组"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("类似归并，要点是从后往前遍历，从尾巴开始填充")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 16.03")]),t._v(" "),r("td",[t._v("困难")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/intersection-lcci/",target:"_blank",rel:"noopener noreferrer"}},[t._v("交点"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数学")]),t._v(" "),r("td",[t._v("参数方程表示线段，求交点，考虑斜率相等重叠等情况")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 16.16")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/sub-sort-lcci/",target:"_blank",rel:"noopener noreferrer"}},[t._v("部分排序"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("双指针")]),t._v(" "),r("td",[t._v("从左到右遍历不是为了找第一个不守序的元素，而是找最后一个")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 17.16")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/the-masseuse-lcci",target:"_blank",rel:"noopener noreferrer"}},[t._v("按摩师"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("动态规划")]),t._v(" "),r("td",[t._v("dp[i]=max(dp[i-1], dp[i-2]+val[i])（三个变量迭代即可）")])])])]),t._v(" "),r("h2",{attrs:{id:"剑指-offer-系列"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#剑指-offer-系列","aria-hidden":"true"}},[t._v("#")]),t._v(" 剑指 Offer 系列")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("序号")]),t._v(" "),r("th",[t._v("难度")]),t._v(" "),r("th",[t._v("题目")]),t._v(" "),r("th",[t._v("标签")]),t._v(" "),r("th",[t._v("思路")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("面试题 10-I")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof",target:"_blank",rel:"noopener noreferrer"}},[t._v("斐波那契数列"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数学")]),t._v(" "),r("td",[t._v("基础题，直接用两个变量递推就可以")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 11")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof",target:"_blank",rel:"noopener noreferrer"}},[t._v("旋转数组的最小数字"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组 查找")]),t._v(" "),r("td",[t._v("二分查找的变种，注意两指针相等时需要做保守策略")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 13")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/ji-qi-ren-de-yun-dong-fan-wei-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("机器人的运动范围"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("矩阵 遍历")]),t._v(" "),r("td",[t._v("DFS/BFS 仔细分析限制条件，只需向右/下走即可遍历所有")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 14-I")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/jian-sheng-zi-lcof",target:"_blank",rel:"noopener noreferrer"}},[t._v("剪绳子"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数学 贪心")]),t._v(" "),r("td",[t._v("需要能观察出规律，或者数学推导，否则需动归")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 26")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof",target:"_blank",rel:"noopener noreferrer"}},[t._v("树的子结构"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树")]),t._v(" "),r("td",[t._v("二叉树版的字符串比对，时间复杂度 O(M*N)可以了")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 27")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉树的镜像"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树")]),t._v(" "),r("td",[t._v("递归 left, right = mirror(right), mirror[left]")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 33")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof",target:"_blank",rel:"noopener noreferrer"}},[t._v("二叉搜索树的后序遍历序列"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("树")]),t._v(" "),r("td",[t._v("翻转后序遍历结果就是镜像先序遍历+搜索树先序遍历递增性质")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 40")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/zui-xiao-de-kge-shu-lcof",target:"_blank",rel:"noopener noreferrer"}},[t._v("最小的 k 个数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("排序 TopK")]),t._v(" "),r("td",[t._v("堆排序（O(nlogk)） / 快速排序变种（O(n)）")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 46")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof",target:"_blank",rel:"noopener noreferrer"}},[t._v("把数字翻译成字符串"),r("OutboundLink")],1)]),t._v(" "),r("td"),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("面试题 51")]),t._v(" "),r("td",[t._v("困难")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("数组中的逆序对"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组 排序")]),t._v(" "),r("td",[t._v("和顺序有关需优化可考虑排序算法。本题一边归并一边统计")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 56-I")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("数组中数字出现的次数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("位运算")]),t._v(" "),r("td",[t._v("要求低时空复杂度，考虑位运算，又有重复的条件，考虑异或")])]),t._v(" "),r("tr",[r("td",[t._v("面试题 57-II")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof",target:"_blank",rel:"noopener noreferrer"}},[t._v("和为 s 的连续正数序列"),r("OutboundLink")],1)]),t._v(" "),r("td"),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("面试题 59-II")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof",target:"_blank",rel:"noopener noreferrer"}},[t._v("队列的最大值"),r("OutboundLink")],1)]),t._v(" "),r("td"),t._v(" "),r("td")]),t._v(" "),r("tr",[r("td",[t._v("面试题 62")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/",target:"_blank",rel:"noopener noreferrer"}},[t._v("圆圈中最后剩下的数字"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数学")]),t._v(" "),r("td",[t._v("约瑟夫环循环链表可解 但数学推导从结果反推起始位置更好")])])])]),t._v(" "),r("h2",{attrs:{id:"leetcode-周赛"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-周赛","aria-hidden":"true"}},[t._v("#")]),t._v(" LeetCode 周赛")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("周")]),t._v(" "),r("th",[t._v("序号")]),t._v(" "),r("th",[t._v("难度")]),t._v(" "),r("th",[t._v("题目")]),t._v(" "),r("th",[t._v("标签")]),t._v(" "),r("th",[t._v("思路")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("178")]),t._v(" "),r("td",[t._v("1365")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/how-many-numbers-are-smaller-than-the-current-number/",target:"_blank",rel:"noopener noreferrer"}},[t._v("有多少小于当前数字的数字"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("暴力 / 桶排序 / O(NlogN)排序")])]),t._v(" "),r("tr",[r("td",[t._v("178")]),t._v(" "),r("td",[t._v("1366")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/rank-teams-by-votes",target:"_blank",rel:"noopener noreferrer"}},[t._v("通过投票对团队排名"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("排序")]),t._v(" "),r("td",[t._v("自定义排序的比较规则，哈希表存储信息")])]),t._v(" "),r("tr",[r("td",[t._v("180")]),t._v(" "),r("td",[t._v("1380")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix/",target:"_blank",rel:"noopener noreferrer"}},[t._v("矩阵中的幸运数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("统计每行最小与每列最大，取交集")])]),t._v(" "),r("tr",[r("td",[t._v("180")]),t._v(" "),r("td",[t._v("1381")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/design-a-stack-with-increment-operation/",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计一个支持增量操作的栈"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组 栈 设计")]),t._v(" "),r("td",[t._v("优化：可以设置一个增量数组用于弹出时再加上")])]),t._v(" "),r("tr",[r("td",[t._v("182")]),t._v(" "),r("td",[t._v("5368")]),t._v(" "),r("td",[t._v("简单")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/find-lucky-integer-in-an-array/",target:"_blank",rel:"noopener noreferrer"}},[t._v("找出数组中的幸运数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("哈希表")])]),t._v(" "),r("tr",[r("td",[t._v("182")]),t._v(" "),r("td",[t._v("5369")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/count-number-of-teams/",target:"_blank",rel:"noopener noreferrer"}},[t._v("统计作战单位数"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("数组")]),t._v(" "),r("td",[t._v("滑动窗口，先选最高和最低，再在中间选中间")])]),t._v(" "),r("tr",[r("td",[t._v("182")]),t._v(" "),r("td",[t._v("5370")]),t._v(" "),r("td",[t._v("中等")]),t._v(" "),r("td",[r("a",{attrs:{href:"https://leetcode-cn.com/problems/design-underground-system/",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计地铁系统"),r("OutboundLink")],1)]),t._v(" "),r("td",[t._v("设计")]),t._v(" "),r("td",[t._v("使用哈希表设计好信息存储即可")])])])])])},[],!1,null,null,null);e.default=v.exports}}]);