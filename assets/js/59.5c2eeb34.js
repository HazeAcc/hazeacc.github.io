(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{263:function(t,v,a){"use strict";a.r(v);var _=a(1),s=Object(_.a)({},function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript-类型转换专题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-类型转换专题","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript | 类型转换专题")]),t._v(" "),a("p",[t._v("先来一个表情包：")]),t._v(" "),a("img",{attrs:{width:"400px",src:"https://i.loli.net/2020/02/18/I2rShFKP8L6uAXw.jpg"}}),t._v(" "),a("p",[t._v("咳咳...这可能是每个 JSer 都绕不开的话题。")]),t._v(" "),a("br"),t._v(" "),a("p",[t._v("在第一篇笔记 "),a("router-link",{attrs:{to:"/notes/javascript/section-1/basic-introduction.html#类型转换"}},[t._v("JavaScript | 入门基础")]),t._v(" 中，我们简单介绍了原始类型的互相转换。")],1),t._v(" "),a("p",[t._v("而在本篇中，我们将着重于讲述类型的"),a("strong",[t._v("自动")]),t._v("转换机制并做易错点总结对比。")]),t._v(" "),a("h2",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录","aria-hidden":"true"}},[t._v("#")]),t._v(" 目录 ")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2"}},[t._v("原始类型转换")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E8%BD%AC%E6%8D%A2%E4%B8%BA-boolean"}},[t._v("转换为 boolean")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6"}},[t._v("比较运算符")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#%E7%9B%B8%E7%AD%89%E8%BF%90%E7%AE%97%E7%AC%A6"}},[t._v("相等运算符")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6"}},[t._v("关系运算符")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%9B%9B%E5%88%99%E8%BF%90%E7%AE%97%E7%AC%A6"}},[t._v("四则运算符")])])])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E5%AF%B9%E8%B1%A1%E5%90%91%E5%8E%9F%E5%A7%8B%E5%80%BC%E8%BD%AC%E6%8D%A2"}},[t._v("对象向原始值转换")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#toprimitive"}},[t._v("ToPrimitive")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#%E8%BF%9B%E4%B8%80%E6%AD%A5%E8%BD%AC%E6%8D%A2"}},[t._v("进一步转换")])])])])]),t._v(" "),a("br"),t._v(" "),a("hr"),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"原始类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 原始类型转换")]),t._v(" "),a("p",[t._v("大多数情况下，运算符和函数会自动将赋予他们的值转换为正确的类型。比如："),a("code",[t._v("alert")]),t._v("会自动将任何值都转换为字符串以进行显示，算术运算符会将值转换为数字。")]),t._v(" "),a("p",[t._v("而如果在某些情况下，我们想要将值显式地转换为我们期望的类型，可以手动地进行转换。（这部分见 "),a("router-link",{attrs:{to:"/notes/javascript/section-1/basic-introduction.html#类型转换"}},[t._v("JavaScript | 入门基础")]),t._v("）")],1),t._v(" "),a("p",[t._v("手动转换是可控的，我们只要掌握正确的方式即可，往往不会出现大问题。但是自动转换在有些时候非常方便，但有些时候让我们更加头疼不已，这可能是 JavaScript 在设计之初的历史问题，也算是黑点之一。不过只要规范代码，记住规则，这玩意也没有那么难缠。")]),t._v(" "),a("p",[t._v("在 JavaScript 中，类型转换基本归为以下三种：")]),t._v(" "),a("ul",[a("li",[t._v("转布尔值（boolean）")]),t._v(" "),a("li",[t._v("转数字（number）")]),t._v(" "),a("li",[t._v("转字符串（string）")])]),t._v(" "),a("p",[t._v("我们分情况进行考虑：")]),t._v(" "),a("h3",{attrs:{id:"转换为-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转换为-boolean","aria-hidden":"true"}},[t._v("#")]),t._v(" 转换为 boolean")]),t._v(" "),a("p",[t._v("对比之后要讲到的情况的复杂程度，转布尔值算是最简单的情况了。")]),t._v(" "),a("p",[t._v("毕竟它一般都符合直观上的感觉，都不用怎么记忆。")]),t._v(" "),a("p",[t._v("在条件判断（例如"),a("code",[t._v("if")]),t._v("）时，如果条件计算的结果不是"),a("code",[t._v("boolean")]),t._v("类型，会发生类型转换，将结果变为"),a("code",[t._v("boolean")]),t._v("类型。")]),t._v(" "),a("p",[t._v("除了"),a("code",[t._v("undefined")]),t._v("、"),a("code",[t._v("null")]),t._v("、"),a("code",[t._v("false")]),t._v("、"),a("code",[t._v("NaN")]),t._v("、"),a("code",[t._v("''")]),t._v("、"),a("code",[t._v("0")]),t._v("、"),a("code",[t._v("-0")]),t._v("，其他所有值都转为"),a("code",[t._v("true")]),t._v("，包括所有的对象类型。")]),t._v(" "),a("p",[t._v("值得注意的是，"),a("code",[t._v("if(value)")]),t._v("与"),a("code",[t._v("if(value == true)")]),t._v("并不是一种判断逻辑，得到的结果也可能会产生差别，如果有其他语言基础的同学很容易在这个问题上翻车车（详细的原因请继续往下看）。")]),t._v(" "),a("br"),t._v(" "),a("h3",{attrs:{id:"比较运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 比较运算符")]),t._v(" "),a("p",[t._v("JavaScript 的比较运算符可以分为两类。")]),t._v(" "),a("p",[t._v("一类是"),a("strong",[t._v("相等运算符")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("相等（"),a("code",[t._v("==")]),t._v("）")]),t._v(" "),a("li",[t._v("不相等（"),a("code",[t._v("!=")]),t._v("）")]),t._v(" "),a("li",[t._v("严格/一致相等（"),a("code",[t._v("===")]),t._v("）")]),t._v(" "),a("li",[t._v("严格/一致不相等（"),a("code",[t._v("!==")]),t._v("）")])]),t._v(" "),a("p",[t._v("还有一类是"),a("strong",[t._v("关系运算符")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("小于（"),a("code",[t._v("<")]),t._v("）")]),t._v(" "),a("li",[t._v("大于（"),a("code",[t._v(">")]),t._v("）")]),t._v(" "),a("li",[t._v("小于等于（"),a("code",[t._v("<=")]),t._v("）")]),t._v(" "),a("li",[t._v("大于等于（"),a("code",[t._v(">=")]),t._v("）")])]),t._v(" "),a("p",[t._v("比较的结果会返回"),a("code",[t._v("true")]),t._v("或"),a("code",[t._v("false")]),t._v("。")]),t._v(" "),a("p",[t._v("其中，只有"),a("code",[t._v("===")]),t._v("、"),a("code",[t._v("!==")]),t._v("两种不会对比较的双方发生类型转换。")]),t._v(" "),a("p",[t._v("这也是为什么各大标准都推荐优先使用这两个作为判断是否相等的符号，除非是允许两个变量的类型互不相同的情况。")]),t._v(" "),a("p",[t._v("而其他的比较运算符，则会发生花里胡哨的转换。")]),t._v(" "),a("h4",{attrs:{id:"相等运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相等运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 相等运算符")]),t._v(" "),a("p",[t._v("对于使用会发生转换的比较运算符的变量"),a("code",[t._v("x")]),t._v("、"),a("code",[t._v("y")]),t._v("，大致有着如下的判断规则（以"),a("code",[t._v("==")]),t._v("为例）：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://i.loli.net/2020/02/18/64ygrKmBhWtnkPo.jpg",alt:"'s rules.jpg"}})]),t._v(" "),a("blockquote",[a("p",[t._v("注：在这个图中，"),a("code",[t._v("==")]),t._v("两端的变量位置互换得到的结果是相同的。")])]),t._v(" "),a("p",[t._v("可以看出，对于不同的两个类型做比较，最终落实到的往往大多都是“数值大小”的比较。")]),t._v(" "),a("p",[t._v("注意到："),a("code",[t._v("boolean")]),t._v("类型做比较也会转成"),a("code",[t._v("number")]),t._v("类型。")]),t._v(" "),a("p",[t._v("所以很多时候"),a("code",[t._v("if(value)")]),t._v("能够"),a("code",[t._v("true")]),t._v("的变量到了"),a("code",[t._v("if(value == true)")]),t._v("的情况下反而返回"),a("code",[t._v("false")]),t._v("，往往就是因为"),a("code",[t._v("value")]),t._v("本身返回的值不是"),a("code",[t._v("boolean")]),t._v("类型。")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("if(value)")]),t._v("中走的是"),a("code",[t._v("Boolean(value)")]),t._v("的自动转换规则，而在"),a("code",[t._v("if(value == true)")]),t._v("中走的是符合"),a("code",[t._v("==")]),t._v("规则的自动转换规则，自然结果也会不一样。")]),t._v(" "),a("p",[t._v("更多特殊知识点：")]),t._v(" "),a("ul",[a("li",[t._v("对于"),a("code",[t._v("null")]),t._v("和"),a("code",[t._v("undefined")]),t._v("，不严格时可以互等，严格时只能自己和自己相等")]),t._v(" "),a("li",[a("code",[t._v("NaN")]),t._v("和任何值不相等，包括其自身")]),t._v(" "),a("li",[a("code",[t._v("NaN")]),t._v("和任何值比大小都为"),a("code",[t._v("false")])]),t._v(" "),a("li",[t._v("正数零等于负数零")]),t._v(" "),a("li",[t._v("对于对象之间的相等比较，会判断两个变量的引用是否相同（无论是否严格）。")]),t._v(" "),a("li",[a("code",[t._v("number")]),t._v("、"),a("code",[t._v("string")]),t._v("、"),a("code",[t._v("boolean")]),t._v("类型判断相等时都建议用严格相等（再次强调）")])]),t._v(" "),a("p",[t._v("最后一个小问题："),a("code",[t._v("'42'")]),t._v("、"),a("code",[t._v("String(42)")]),t._v("与"),a("code",[t._v("new String(42)")]),t._v("之间是否相等？")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("'42'")]),t._v("（字符串）、"),a("code",[t._v("String(42)")]),t._v("（字符串）与"),a("code",[t._v("new String(42)")]),t._v("（对象），字符串和对象是不同的。")]),t._v(" "),a("p",[a("code",[t._v("'42'=='42'")]),t._v("（字符串相等）为"),a("code",[t._v("true")])]),t._v(" "),a("p",[a("code",[t._v("new String(42) == new String(42)")]),t._v("（对象相等）为"),a("code",[t._v("false")]),t._v("。")])]),t._v(" "),a("h4",{attrs:{id:"关系运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 关系运算符")]),t._v(" "),a("p",[t._v("关系运算符会比较两个操作数的大小：")]),t._v(" "),a("ul",[a("li",[t._v("数字之间的比较当然就是数学意义上的比较")]),t._v(" "),a("li",[t._v("字符串之间的比较遵循"),a("router-link",{attrs:{to:"/notes/javascript/section-1/basic-introduction.html#字符串比较"}},[t._v("字符串比较算法")]),t._v("，使用 Unicode 序列大小来判断（温习一下："),a("code",[t._v("'42' < '7'")]),t._v("为"),a("code",[t._v("true")]),t._v("）")],1),t._v(" "),a("li",[t._v("而对于两个不同类型的操作数，如果是字符串与数字之间的比较，若字符串可以转换为"),a("code",[t._v("number")]),t._v("类型，则转换为"),a("code",[t._v("number")]),t._v("类型之间的比较，否则会返回"),a("code",[t._v("false")])]),t._v(" "),a("li",[a("code",[t._v("boolean")]),t._v("类型会转为"),a("code",[t._v("number")]),t._v("类型（但这真的有什么实际意义🐴？为了代码不规范的程序员预留后路？）")])]),t._v(" "),a("blockquote",[a("p",[t._v("请使用关系运算符去比较相同类型之间的大小！（你清醒一点.jpg）")]),t._v(" "),a("p",[t._v("诸如为什么"),a("code",[t._v("null <= 0")]),t._v("与"),a("code",[t._v("null >= 0")]),t._v("都是"),a("code",[t._v("true")]),t._v("而"),a("code",[t._v("null == 0")]),t._v("为"),a("code",[t._v("false")]),t._v("的问题就不要问了")]),t._v(" "),a("p",[t._v("（网上的说法是：因为"),a("code",[t._v("null <= 0")]),t._v("是通过"),a("code",[t._v("!(null > 0)")]),t._v("来判断的，我未找到证据）")])]),t._v(" "),a("br"),t._v(" "),a("h3",{attrs:{id:"四则运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四则运算符","aria-hidden":"true"}},[t._v("#")]),t._v(" 四则运算符")]),t._v(" "),a("p",[t._v("数学运算往往会将原始对象们自动转换为"),a("code",[t._v("number")]),t._v("类型，这看起来是“耍小聪明”的，不过这应该主要是因为网络与浏览器的环境下经常会有"),a("code",[t._v("string")]),t._v("等类型来表示数值的情况，所以这个自动转换在一定程度上简化了我们的代码量，也让我们不用在接收值时考虑它到底是"),a("code",[t._v("string")]),t._v("类型还是"),a("code",[t._v("number")]),t._v("类型。")]),t._v(" "),a("p",[t._v("不过，在四则运算符中，加法运算符"),a("code",[t._v("+")]),t._v("在二元运算中的与众不同是新手的第一个容易掉入的坑。")]),t._v(" "),a("p",[t._v("对于加法运算符的二元运算而言：")]),t._v(" "),a("ul",[a("li",[t._v("运算中其中一方为字符串，那么就会把另一方也转换为字符串")]),t._v(" "),a("li",[t._v("如果一方既不是数字也不是字符串，那么会将它根据自己的规则转换为数字或者字符串")])]),t._v(" "),a("p",[t._v("大型迷惑现场：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '11'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "41,2,3"')]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("前两个较容易理解，而第三例"),a("code",[t._v("4 + [1,2,3]")]),t._v("涉及到对象向原始类型的转换规则，我放在下文 "),a("a",{attrs:{href:"#%E5%AF%B9%E8%B1%A1%E5%90%91%E5%8E%9F%E5%A7%8B%E5%80%BC%E8%BD%AC%E6%8D%A2"}},[t._v("#对象向原始值转换")]),t._v(" 进行讲解。")])]),t._v(" "),a("p",[t._v("再来个例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "aNaN"')]),t._v("\n")])])]),a("p",[t._v("分析一下：")]),t._v(" "),a("ol",[a("li",[t._v("首先是"),a("code",[t._v("+'b'")]),t._v("想要将字符串"),a("code",[t._v("'b'")]),t._v("转换为"),a("code",[t._v("number")]),t._v("类型")]),t._v(" "),a("li",[t._v("因为"),a("code",[t._v("'b'")]),t._v("不是一个数字字符串，所以转换的结果为"),a("code",[t._v("NaN")]),t._v("（注意"),a("code",[t._v("NaN")]),t._v("也是属于"),a("code",[t._v("number")]),t._v("类型的定义范围，不要以为它是字符串）")]),t._v(" "),a("li",[t._v("然后就是一个"),a("code",[t._v("string")]),t._v("类型+"),a("code",[t._v("number")]),t._v("类型的表达式"),a("code",[t._v("'a' + NaN")]),t._v("了")]),t._v(" "),a("li",[t._v("根据规则，将"),a("code",[t._v("NaN")]),t._v("转化为字符串"),a("code",[t._v("'NaN'")]),t._v("，然后进行字符串拼接，得到"),a("code",[t._v("'aNaN'")])])]),t._v(" "),a("p",[t._v("而其他的运算符就简单了，只要其中一方是数字，那么另外一方就会被转换为数字。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),a("br"),t._v(" "),a("h2",{attrs:{id:"对象向原始值转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象向原始值转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 对象向原始值转换")]),t._v(" "),a("p",[t._v("前面几个例子中有提到对象也参与运算符进行运算的情况，同样的，它们也是有着一定的转换规则的。")]),t._v(" "),a("h3",{attrs:{id:"toprimitive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toprimitive","aria-hidden":"true"}},[t._v("#")]),t._v(" ToPrimitive")]),t._v(" "),a("p",[t._v("对象到原始（Primitive）值的转换，是由许多"),a("strong",[t._v("内置函数和操作符")]),t._v("自动调用内置的"),a("code",[t._v("[[ToPrimitive]]")]),t._v("函数，它会使用一个原始值作为返回值。")]),t._v(" "),a("p",[t._v("它有三种类型（或者说“暗示”）：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v('"'),a("code",[t._v('string"')])]),t._v(" "),a("p",[t._v("当我们对期望一个字符串的对象执行操作时，如"),a("code",[t._v("alert()")]),t._v("，会发生从对象到字符串的转换：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将对象作为属性键时")]),t._v("\nsomething"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v('"number"')])]),t._v(" "),a("p",[t._v("当我们期待做数学运算时，发生对象到数值的转换：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显式转换")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数学运算（除了二元加法）")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一元加法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" delta "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" date1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" date2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 小于/大于的比较")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" isGreater "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" date1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" date2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[a("code",[t._v('"default"')])]),t._v(" "),a("p",[t._v("在少数情况下，调用者不确定自己所期望的类型，这个情况下，绝大多数都会当作"),a("code",[t._v('"number"')]),t._v("类型来处理。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二元加法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" total "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 比较运算符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("规范明确描述了哪个操作符使用哪个暗示。极少数操作者虽然是内置的操作符，也“不知道自己期望什么”，并使用"),a("code",[t._v('"default"')]),t._v("暗示。")])])]),t._v(" "),a("p",[t._v("通常对于内置对象，"),a("code",[t._v('"default"')]),t._v("暗示的处理方式与"),a("code",[t._v('"number"')]),t._v("相同（除了"),a("code",[t._v("Date")]),t._v("对象，它会"),a("code",[t._v("toString()")]),t._v("），因此在实践中最后两个通常合并在一起。")]),t._v(" "),a("p",[t._v("为了进行转换，JavaScript 会按照以下顺序去执行调用对象的方法：")]),t._v(" "),a("ol",[a("li",[t._v("如果"),a("code",[t._v("obj[Symbol.toPrimitive](hint)")]),t._v("存在，则调用它。")]),t._v(" "),a("li",[t._v("否则，如果暗示是"),a("code",[t._v('"string"')]),t._v("，尝试"),a("code",[t._v("toString()")]),t._v("和"),a("code",[t._v("valueOf()")])]),t._v(" "),a("li",[t._v("否则，如果暗示是"),a("code",[t._v('"number"')]),t._v("或者"),a("code",[t._v('"default"')]),t._v("，尝试"),a("code",[t._v("valueOf()")]),t._v("和"),a("code",[t._v("toString()")])]),t._v(" "),a("li",[t._v("如果"),a("code",[t._v("valueOf()")]),t._v("转换后的值仍然不是原始类型，则会调用"),a("code",[t._v("toString()")])])]),t._v(" "),a("p",[t._v("不论如何，"),a("code",[t._v("[[ToPrimitive]]")]),t._v("一定会保证对象转换后返回一个原始值，否则会报错。")]),t._v(" "),a("blockquote",[a("p",[t._v("我们可以返回去看看之前举的例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "41,2,3"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])])]),a("ul",[a("li",[t._v("对于第一行\n"),a("ol",[a("li",[a("code",[t._v("[1, 2, 3]")]),t._v("是"),a("code",[t._v("Array")]),t._v("对象，在"),a("code",[t._v("default")]),t._v("暗示下调用了"),a("code",[t._v("valueOf()")]),t._v("方法，返回的仍然是对象，故不行")]),t._v(" "),a("li",[t._v("接着，调用"),a("code",[t._v("[1, 2, 3]")]),t._v("的"),a("code",[t._v("toString()")]),t._v("方法，返回"),a("code",[t._v("'1,2,3'")]),t._v("字符串")]),t._v(" "),a("li",[t._v("数字"),a("code",[t._v("4")]),t._v("与字符串"),a("code",[t._v("'1,2,3'")]),t._v("相加，变成字符串相连，得到结果："),a("code",[t._v("'41,2,3'")])])])]),t._v(" "),a("li",[t._v("第二行\n"),a("ol",[a("li",[a("code",[t._v("[]")]),t._v("是一个空数组，和第一行例子类似地调用"),a("code",[t._v("valueOf()")]),t._v("不行后调用"),a("code",[t._v("toString()")]),t._v("，返回空字符串"),a("code",[t._v("''")])]),t._v(" "),a("li",[t._v("数字"),a("code",[t._v("4")]),t._v("与空字符串"),a("code",[t._v("''")]),t._v("相乘，空字符串"),a("code",[t._v("''")]),t._v("转换为数字"),a("code",[t._v("0")]),t._v("，结果为"),a("code",[t._v("0")])])])]),t._v(" "),a("li",[t._v("第三行\n"),a("ol",[a("li",[t._v("同样的，推得数字"),a("code",[t._v("4")]),t._v("与字符串"),a("code",[t._v("'1,2'")]),t._v("相乘，"),a("code",[t._v("'1,2'")]),t._v("无法转为合法数字，于是变成"),a("code",[t._v("NaN")]),t._v("，相乘后仍然为"),a("code",[t._v("NaN")])]),t._v(" "),a("li",[t._v("可以发散地推理得，如果是单元素数组，结果就会变为数字与该元素对于的数字相乘\n"),a("br")])])])])]),t._v(" "),a("h3",{attrs:{id:"进一步转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进一步转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 进一步转换")]),t._v(" "),a("p",[t._v("不过，经过转换后的原始值，当然是可以再发生进一步转换的。比如这里有一个自定义的对象：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"42"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如果需要它转换，会调用"),a("code",[t._v("toString()")]),t._v("方法转换为初始值"),a("code",[t._v('"42"')]),t._v("。")]),t._v(" "),a("p",[t._v("而这个时候如果上下文环境是数学运算，则字符串可以继续自动转换为数字：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "42" * 2 => 42 * 2 => 84')]),t._v("\n")])])]),a("br"),t._v(" "),a("h2",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语","aria-hidden":"true"}},[t._v("#")]),t._v(" 结语 ")]),t._v(" "),a("p",[t._v("不知道看到这的你是否全部都看了一遍，或者看完了记住了多少（🐴？），但是记清这些规则对于了解 JavaScript 的特点有着一定的帮助（"),a("s",[t._v("更大的帮助应该是面对稀奇古怪的面试题")]),t._v("）。最起码弄清了这些，就不会被这些琐事打断代码的编写，去反复搜索不一定靠谱的解答，也不怕别人问起来时自己也一知半解，说个错误的答案出来。")]),t._v(" "),a("p",[t._v("像我一开始学习 JavaScript 时都是略读这些部分的内容，但学到后面才意识到这些琐碎的知识的重要之处，返回过来进行完整的总结。如果可以的话，最好还是能反复阅读这些知识点直到记住它们，或者自己也做一点相关的笔记（比心❤）")]),t._v(" "),a("br")])},[],!1,null,null,null);v.default=s.exports}}]);