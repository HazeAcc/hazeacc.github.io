(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{284:function(t,v,e){"use strict";e.r(v);var _=e(1),i=Object(_.a)({},function(){var t=this,v=t.$createElement,e=t._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git-commit-规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-规范","aria-hidden":"true"}},[t._v("#")]),t._v(" Git commit 规范")]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("观察别人的项目，有时候会发现好的项目的 commit 记录都遵循着"),e("code",[t._v("<type>: <subject>")]),t._v("的规则。")]),t._v(" "),e("p",[t._v("好处显而易见："),e("code",[t._v("type")]),t._v("能够第一时间了解到该 commit 的性质，"),e("code",[t._v("subject")]),t._v("则是对该 commit 的简短描述。")]),t._v(" "),e("p",[t._v("保持该规范对 commit 的整洁性有着很大的帮助 😄")]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 规范")]),t._v(" "),e("p",[t._v("不过在具体的规范中，我们到底要不要对"),e("code",[t._v("type")]),t._v("的种类进行限制呢？首字母到底要不要大写呢？")]),t._v(" "),e("p",[t._v("其实在这方面，早就有人做好了 Git Commit 的自动化代码提交规范工具，比较常见的是 "),e("a",{attrs:{href:"https://www.npmjs.com/package/@commitlint/config-conventional",target:"_blank",rel:"noopener noreferrer"}},[t._v("Commitlint"),e("OutboundLink")],1),t._v("，它提出了一些简单的规范：")]),t._v(" "),e("ul",[e("li",[t._v("feat：新功能（feature）")]),t._v(" "),e("li",[t._v("fix：修补 bug")]),t._v(" "),e("li",[t._v("docs：文档（documentation）")]),t._v(" "),e("li",[t._v("style：格式方面的优化（空格、代码格式化等）")]),t._v(" "),e("li",[t._v("refactor：代码重构（不是 bug 也不是 feature）")]),t._v(" "),e("li",[t._v("test：测试")]),t._v(" "),e("li",[t._v("chore：构建过程或辅助工具等无关紧要的变动")])]),t._v(" "),e("p",[t._v("如果 commit 时不存在于以上的 type 中，则该 commit 会被拦截下来提交失败。")]),t._v(" "),e("p",[t._v("当然了，如果觉得这些 type 不够，或者想增加更多的规则，也可以修改其配置文件。")]),t._v(" "),e("p",[t._v("比如加个 publish、breaking 等，也不是不行，但最好能在一开始约定好，频繁地变动会导致规范变得没有意义。")]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"完整规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#完整规范","aria-hidden":"true"}},[t._v("#")]),t._v(" 完整规范")]),t._v(" "),e("p",[t._v("我们常用的单行 commit 信息其实只是 commit 的 header 部分，对于完整的 commit，还有 body 与 footer。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<type>(<scope>): <subject>\n\n<body>\n\n<footer>\n")])])]),e("p",[t._v("一般而言，我们只用使用 header 就可以完整表明，其中的 scope 代表本次 commit 所影响的范围，可以选择性添加。")]),t._v(" "),e("p",[t._v("body 是对 commit 的详细描述，可以写为多行。注意 header、body、footer直接都有一个空行。")]),t._v(" "),e("p",[t._v("footer 则是功能性的，比如本次 commit 关闭某一个 issue。")]),t._v(" "),e("br"),t._v(" "),e("h2",{attrs:{id:"后记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#后记","aria-hidden":"true"}},[t._v("#")]),t._v(" 后记")]),t._v(" "),e("p",[t._v("如果是个人项目，我觉得自己私底下定一下规则就好了，比如我们可以在每个 header 前加上 emoji 表情，甚至用 emoji 代替 header 我觉得都是可行的方案。")]),t._v(" "),e("p",[t._v("只要达到了规范的目的，项目就会变得更加整洁。")]),t._v(" "),e("p",[t._v("上面的规范都是针对有代码的项目的，这里我自己简单地定一个面向文档笔记项目的 commit 规范，供大家参考：")]),t._v(" "),e("ul",[e("li",[t._v("new：新文章")]),t._v(" "),e("li",[t._v("add：旧文档增加新内容")]),t._v(" "),e("li",[t._v("fix：错误内容的修正")]),t._v(" "),e("li",[t._v("typo：拼写错误")]),t._v(" "),e("li",[t._v("modify：部分内容修改")]),t._v(" "),e("li",[t._v("move：文件结构的变动")]),t._v(" "),e("li",[t._v("rename：文件名更改所引起的相关变动")]),t._v(" "),e("li",[t._v("remove：删除文件")]),t._v(" "),e("li",[t._v("chore：其他无关紧要的变动")])]),t._v(" "),e("p",[t._v("还有一种更简洁的方法，就是用符号当作 header，冒号"),e("code",[t._v(":")]),t._v("也省略掉：")]),t._v(" "),e("ul",[e("li",[t._v("+：增加新东西")]),t._v(" "),e("li",[t._v("-：删减部分内容")]),t._v(" "),e("li",[t._v("*：修改代码")]),t._v(" "),e("li",[t._v("!：重要变动")]),t._v(" "),e("li",[t._v("...")])]),t._v(" "),e("p",[t._v("也挺好看的，就是易懂的符号的个数有点受限，对于比较特殊的符号可能就不便于他人理解了。不过毕竟是个人项目，适合自己，看起来舒服就好啦。")]),t._v(" "),e("br")])},[],!1,null,null,null);v.default=i.exports}}]);